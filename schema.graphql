type Moloch @entity {
  "unique identifier and primary key of the entity"
  id: ID!
  "address that created the dao"
  summoner: Bytes!  
  "member addresses scoped to this dao"
  members: [Member!] @derivedFrom(field: "moloch")
  "proposals scoped to this dao"
  proposals: [Proposal!] @derivedFrom(field: "moloch")
  "ragequits scoped to this dao"
  rageQuits: [RageQuit!] @derivedFrom(field: "moloch")
  "total circulating shares tokens"
  totalShares: BigInt!
  "total circulating loot tokens"
  totalLoot: BigInt!
}

type Member @entity {
  "unique identifier and primary key of the entity"
  id: ID!
  "moloch dao scoped to this member"
  moloch: Moloch!
  "related dao address"
  molochAddress: Bytes!
  "address of the member"
  memberAddress: Bytes!
  "address that has received delegated shares from the member (most often, the member's own address)"
  delegateKey: Bytes!
  "current shares held by the member"
  shares: BigInt!
  "current loot held by the member"
  loot: BigInt!
  "deprecated"
  exists: Boolean!
  "latest proposal that the member has voted yes on (helper value for disabling ragequit if member has a yes vote on an active proposal)"
  highestIndexYesVote: Proposal
  "amount of token tributed when the member first joined the dao"
  tokenTribute: BigInt!
  "boolean value of whether member ragequit from the dao"
  didRagequit: Boolean!
  "votes scoped to this member"
  votes: [Vote!] @derivedFrom(field: "member")
  "submitted proposals scoped to this member"
  submissions: [Proposal!] @derivedFrom(field: "member")
  "rage quits scoped to this member"
  rageQuits: [RageQuit!] @derivedFrom(field: "member")
  "moloch dao address (if the member is a dao)"
  isDao: Moloch
}

type Vote @entity {
  "unique identifier and primary key of the entity"
  id: ID!
  "related proposal"
  proposal: Proposal!
  "related/voting member"
  member: Member!
  "whether the dao member has voted yes or no (1 for yes, 2 for no)"
  uintVote: Int!
  "contract address of the DAO related to this vote"
  molochAddress: Bytes!
  "related/voting member address"
  memberAddress: Bytes
  "member's proportional share of all dao shares at time of vote"
  memberPower: BigInt
  "order that the proposal went through sponsorship process"
  proposalIndex: BigInt
  "address that has received delegated shares from the member (most often, the member's own address)"
  delegateKey: Bytes
}


type Proposal @entity {
  "unique identifier and primary key of the entity"
  id: ID!
  "order that the proposal went through sponsorship process"
  proposalIndex: BigInt
  "id of the proposal"
  proposalId: BigInt!
  "moloch dao scoped to this proposal"
  moloch: Moloch!
  "contract address of the DAO related to this proposal"
  molochAddress: Bytes!
  "member scoped to this proposal"
  member: Member!
  "address of associated member"
  memberAddress: Bytes!
  "address that has received delegated shares from the member (most often, the member's own address)"
  delegateKey: Bytes!
  "amount of current shares that have voted yes"
  yesVotes: BigInt!
  "amount of current shares that have voted no"
  noVotes: BigInt!
  "total dao shares and loot at time of yes vote (helper value for dilution bound calculation)"
  maxTotalSharesAndLootAtYesVote: BigInt
  "votes scoped to this proposal"
  votes: [Vote!] @derivedFrom(field: "proposal")
  "number of shares that voted yes"
  yesShares: BigInt!
  "number of shares that voted no"
  noShares: BigInt!
}

type RageQuit @entity {
  "unique identifier and primary key of the entity"
  id: ID!
  "moloch dao scoped to this ragequit"
  moloch: Moloch!
  "related dao address"
  molochAddress: Bytes!
  "member scoped to this ragequit"
  member: Member!
  "related member address"
  memberAddress: Bytes!
  "number of shares ragequit"
  shares: BigInt!
  "number of loot ragequit"
  loot: BigInt!
}
