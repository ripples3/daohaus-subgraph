// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SummonComplete extends ethereum.Event {
  get params(): SummonComplete__Params {
    return new SummonComplete__Params(this);
  }
}

export class SummonComplete__Params {
  _event: SummonComplete;

  constructor(event: SummonComplete) {
    this._event = event;
  }

  get summoner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get summoningTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get periodDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get votingPeriodLength(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get gracePeriodLength(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get proposalDeposit(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get dilutionBound(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get processingReward(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class SubmitProposal extends ethereum.Event {
  get params(): SubmitProposal__Params {
    return new SubmitProposal__Params(this);
  }
}

export class SubmitProposal__Params {
  _event: SubmitProposal;

  constructor(event: SubmitProposal) {
    this._event = event;
  }

  get applicant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesRequested(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lootRequested(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tributeOffered(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tributeToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get paymentRequested(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get details(): string {
    return this._event.parameters[7].value.toString();
  }

  get flags(): Array<boolean> {
    return this._event.parameters[8].value.toBooleanArray();
  }

  get proposalId(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get delegateKey(): Address {
    return this._event.parameters[10].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[11].value.toAddress();
  }
}

export class SponsorProposal extends ethereum.Event {
  get params(): SponsorProposal__Params {
    return new SponsorProposal__Params(this);
  }
}

export class SponsorProposal__Params {
  _event: SponsorProposal;

  constructor(event: SponsorProposal) {
    this._event = event;
  }

  get delegateKey(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startingPeriod(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SubmitVote extends ethereum.Event {
  get params(): SubmitVote__Params {
    return new SubmitVote__Params(this);
  }
}

export class SubmitVote__Params {
  _event: SubmitVote;

  constructor(event: SubmitVote) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delegateKey(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get memberAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get uintVote(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class ProcessProposal extends ethereum.Event {
  get params(): ProcessProposal__Params {
    return new ProcessProposal__Params(this);
  }
}

export class ProcessProposal__Params {
  _event: ProcessProposal;

  constructor(event: ProcessProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessWhitelistProposal extends ethereum.Event {
  get params(): ProcessWhitelistProposal__Params {
    return new ProcessWhitelistProposal__Params(this);
  }
}

export class ProcessWhitelistProposal__Params {
  _event: ProcessWhitelistProposal;

  constructor(event: ProcessWhitelistProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ProcessGuildKickProposal extends ethereum.Event {
  get params(): ProcessGuildKickProposal__Params {
    return new ProcessGuildKickProposal__Params(this);
  }
}

export class ProcessGuildKickProposal__Params {
  _event: ProcessGuildKickProposal;

  constructor(event: ProcessGuildKickProposal) {
    this._event = event;
  }

  get proposalIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get didPass(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Ragequit extends ethereum.Event {
  get params(): Ragequit__Params {
    return new Ragequit__Params(this);
  }
}

export class Ragequit__Params {
  _event: Ragequit;

  constructor(event: Ragequit) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sharesToBurn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lootToBurn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensCollected extends ethereum.Event {
  get params(): TokensCollected__Params {
    return new TokensCollected__Params(this);
  }
}

export class TokensCollected__Params {
  _event: TokensCollected;

  constructor(event: TokensCollected) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountToCollect(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CancelProposal extends ethereum.Event {
  get params(): CancelProposal__Params {
    return new CancelProposal__Params(this);
  }
}

export class CancelProposal__Params {
  _event: CancelProposal;

  constructor(event: CancelProposal) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get applicantAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateDelegateKey extends ethereum.Event {
  get params(): UpdateDelegateKey__Params {
    return new UpdateDelegateKey__Params(this);
  }
}

export class UpdateDelegateKey__Params {
  _event: UpdateDelegateKey;

  constructor(event: UpdateDelegateKey) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDelegateKey(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get memberAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Moloch__proposalsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: BigInt;
  value8: Address;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: string;
  value13: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: BigInt,
    value8: Address,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: string,
    value13: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromString(this.value12));
    map.set("value13", ethereum.Value.fromUnsignedBigInt(this.value13));
    return map;
  }

  getApplicant(): Address {
    return this.value0;
  }

  getProposer(): Address {
    return this.value1;
  }

  getSponsor(): Address {
    return this.value2;
  }

  getSharesRequested(): BigInt {
    return this.value3;
  }

  getLootRequested(): BigInt {
    return this.value4;
  }

  getTributeOffered(): BigInt {
    return this.value5;
  }

  getTributeToken(): Address {
    return this.value6;
  }

  getPaymentRequested(): BigInt {
    return this.value7;
  }

  getPaymentToken(): Address {
    return this.value8;
  }

  getStartingPeriod(): BigInt {
    return this.value9;
  }

  getYesVotes(): BigInt {
    return this.value10;
  }

  getNoVotes(): BigInt {
    return this.value11;
  }

  getDetails(): string {
    return this.value12;
  }

  getMaxTotalSharesAndLootAtYesVote(): BigInt {
    return this.value13;
  }
}

export class Moloch__membersResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getDelegateKey(): Address {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }

  getLoot(): BigInt {
    return this.value2;
  }

  getExists(): boolean {
    return this.value3;
  }

  getHighestIndexYesVote(): BigInt {
    return this.value4;
  }

  getJailed(): BigInt {
    return this.value5;
  }
}

export class Moloch extends ethereum.SmartContract {
  static bind(address: Address): Moloch {
    return new Moloch("Moloch", address);
  }

  proposals(param0: BigInt): Moloch__proposalsResult {
    let result = super.call(
      "proposals",
      "proposals(uint256):(address,address,address,uint256,uint256,uint256,address,uint256,address,uint256,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Moloch__proposalsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toAddress(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toString(),
      result[13].toBigInt()
    );
  }

  try_proposals(param0: BigInt): ethereum.CallResult<Moloch__proposalsResult> {
    let result = super.tryCall(
      "proposals",
      "proposals(uint256):(address,address,address,uint256,uint256,uint256,address,uint256,address,uint256,uint256,uint256,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Moloch__proposalsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toAddress(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toString(),
        value[13].toBigInt()
      )
    );
  }

  processingReward(): BigInt {
    let result = super.call(
      "processingReward",
      "processingReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_processingReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "processingReward",
      "processingReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMemberProposalVote(memberAddress: Address, proposalIndex: BigInt): i32 {
    let result = super.call(
      "getMemberProposalVote",
      "getMemberProposalVote(address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(memberAddress),
        ethereum.Value.fromUnsignedBigInt(proposalIndex)
      ]
    );

    return result[0].toI32();
  }

  try_getMemberProposalVote(
    memberAddress: Address,
    proposalIndex: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getMemberProposalVote",
      "getMemberProposalVote(address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(memberAddress),
        ethereum.Value.fromUnsignedBigInt(proposalIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCurrentPeriod(): BigInt {
    let result = super.call(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  members(param0: Address): Moloch__membersResult {
    let result = super.call(
      "members",
      "members(address):(address,uint256,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Moloch__membersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_members(param0: Address): ethereum.CallResult<Moloch__membersResult> {
    let result = super.tryCall(
      "members",
      "members(address):(address,uint256,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Moloch__membersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  submitGuildKickProposal(memberToKick: Address, details: string): BigInt {
    let result = super.call(
      "submitGuildKickProposal",
      "submitGuildKickProposal(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(memberToKick),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitGuildKickProposal(
    memberToKick: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitGuildKickProposal",
      "submitGuildKickProposal(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(memberToKick),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedTokens(param0: BigInt): Address {
    let result = super.call(
      "approvedTokens",
      "approvedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_approvedTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedTokens",
      "approvedTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOTAL(): Address {
    let result = super.call("TOTAL", "TOTAL():(address)", []);

    return result[0].toAddress();
  }

  try_TOTAL(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOTAL", "TOTAL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalQueue(param0: BigInt): BigInt {
    let result = super.call(
      "proposalQueue",
      "proposalQueue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_proposalQueue(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalQueue",
      "proposalQueue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposedToKick(param0: Address): boolean {
    let result = super.call(
      "proposedToKick",
      "proposedToKick(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_proposedToKick(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proposedToKick",
      "proposedToKick(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  memberAddressByDelegateKey(param0: Address): Address {
    let result = super.call(
      "memberAddressByDelegateKey",
      "memberAddressByDelegateKey(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_memberAddressByDelegateKey(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "memberAddressByDelegateKey",
      "memberAddressByDelegateKey(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userTokenBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userTokenBalances",
      "userTokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userTokenBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTokenBalances",
      "userTokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submitProposal(
    applicant: Address,
    sharesRequested: BigInt,
    lootRequested: BigInt,
    tributeOffered: BigInt,
    tributeToken: Address,
    paymentRequested: BigInt,
    paymentToken: Address,
    details: string
  ): BigInt {
    let result = super.call(
      "submitProposal",
      "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(applicant),
        ethereum.Value.fromUnsignedBigInt(sharesRequested),
        ethereum.Value.fromUnsignedBigInt(lootRequested),
        ethereum.Value.fromUnsignedBigInt(tributeOffered),
        ethereum.Value.fromAddress(tributeToken),
        ethereum.Value.fromUnsignedBigInt(paymentRequested),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitProposal(
    applicant: Address,
    sharesRequested: BigInt,
    lootRequested: BigInt,
    tributeOffered: BigInt,
    tributeToken: Address,
    paymentRequested: BigInt,
    paymentToken: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitProposal",
      "submitProposal(address,uint256,uint256,uint256,address,uint256,address,string):(uint256)",
      [
        ethereum.Value.fromAddress(applicant),
        ethereum.Value.fromUnsignedBigInt(sharesRequested),
        ethereum.Value.fromUnsignedBigInt(lootRequested),
        ethereum.Value.fromUnsignedBigInt(tributeOffered),
        ethereum.Value.fromAddress(tributeToken),
        ethereum.Value.fromUnsignedBigInt(paymentRequested),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLoot(): BigInt {
    let result = super.call("totalLoot", "totalLoot():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLoot", "totalLoot():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gracePeriodLength(): BigInt {
    let result = super.call(
      "gracePeriodLength",
      "gracePeriodLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_gracePeriodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gracePeriodLength",
      "gracePeriodLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserTokenBalance(user: Address, token: Address): BigInt {
    let result = super.call(
      "getUserTokenBalance",
      "getUserTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getUserTokenBalance(
    user: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserTokenBalance",
      "getUserTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenWhitelist(param0: Address): boolean {
    let result = super.call(
      "tokenWhitelist",
      "tokenWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_tokenWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokenWhitelist",
      "tokenWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getTokenCount(): BigInt {
    let result = super.call("getTokenCount", "getTokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenCount",
      "getTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalQueueLength(): BigInt {
    let result = super.call(
      "getProposalQueueLength",
      "getProposalQueueLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProposalQueueLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalQueueLength",
      "getProposalQueueLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  summoningTime(): BigInt {
    let result = super.call("summoningTime", "summoningTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_summoningTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "summoningTime",
      "summoningTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriodLength(): BigInt {
    let result = super.call(
      "votingPeriodLength",
      "votingPeriodLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_votingPeriodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingPeriodLength",
      "votingPeriodLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalDeposit(): BigInt {
    let result = super.call(
      "proposalDeposit",
      "proposalDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDeposit",
      "proposalDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasVotingPeriodExpired(startingPeriod: BigInt): boolean {
    let result = super.call(
      "hasVotingPeriodExpired",
      "hasVotingPeriodExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(startingPeriod)]
    );

    return result[0].toBoolean();
  }

  try_hasVotingPeriodExpired(
    startingPeriod: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasVotingPeriodExpired",
      "hasVotingPeriodExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(startingPeriod)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalGuildBankTokens(): BigInt {
    let result = super.call(
      "totalGuildBankTokens",
      "totalGuildBankTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalGuildBankTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalGuildBankTokens",
      "totalGuildBankTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canRagequit(highestIndexYesVote: BigInt): boolean {
    let result = super.call("canRagequit", "canRagequit(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(highestIndexYesVote)
    ]);

    return result[0].toBoolean();
  }

  try_canRagequit(highestIndexYesVote: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canRagequit", "canRagequit(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(highestIndexYesVote)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dilutionBound(): BigInt {
    let result = super.call("dilutionBound", "dilutionBound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dilutionBound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dilutionBound",
      "dilutionBound():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalFlags(proposalId: BigInt): Array<boolean> {
    let result = super.call(
      "getProposalFlags",
      "getProposalFlags(uint256):(bool[6])",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );

    return result[0].toBooleanArray();
  }

  try_getProposalFlags(
    proposalId: BigInt
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "getProposalFlags",
      "getProposalFlags(uint256):(bool[6])",
      [ethereum.Value.fromUnsignedBigInt(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  memberList(param0: BigInt): Address {
    let result = super.call("memberList", "memberList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_memberList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("memberList", "memberList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodDuration(): BigInt {
    let result = super.call("periodDuration", "periodDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodDuration",
      "periodDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositToken(): Address {
    let result = super.call("depositToken", "depositToken():(address)", []);

    return result[0].toAddress();
  }

  try_depositToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("depositToken", "depositToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalCount(): BigInt {
    let result = super.call("proposalCount", "proposalCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_proposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalCount",
      "proposalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposedToWhitelist(param0: Address): boolean {
    let result = super.call(
      "proposedToWhitelist",
      "proposedToWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_proposedToWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proposedToWhitelist",
      "proposedToWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ESCROW(): Address {
    let result = super.call("ESCROW", "ESCROW():(address)", []);

    return result[0].toAddress();
  }

  try_ESCROW(): ethereum.CallResult<Address> {
    let result = super.tryCall("ESCROW", "ESCROW():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GUILD(): Address {
    let result = super.call("GUILD", "GUILD():(address)", []);

    return result[0].toAddress();
  }

  try_GUILD(): ethereum.CallResult<Address> {
    let result = super.tryCall("GUILD", "GUILD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submitWhitelistProposal(tokenToWhitelist: Address, details: string): BigInt {
    let result = super.call(
      "submitWhitelistProposal",
      "submitWhitelistProposal(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(tokenToWhitelist),
        ethereum.Value.fromString(details)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitWhitelistProposal(
    tokenToWhitelist: Address,
    details: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitWhitelistProposal",
      "submitWhitelistProposal(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(tokenToWhitelist),
        ethereum.Value.fromString(details)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class WithdrawBalanceCall extends ethereum.Call {
  get inputs(): WithdrawBalanceCall__Inputs {
    return new WithdrawBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawBalanceCall__Outputs {
    return new WithdrawBalanceCall__Outputs(this);
  }
}

export class WithdrawBalanceCall__Inputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawBalanceCall__Outputs {
  _call: WithdrawBalanceCall;

  constructor(call: WithdrawBalanceCall) {
    this._call = call;
  }
}

export class SubmitGuildKickProposalCall extends ethereum.Call {
  get inputs(): SubmitGuildKickProposalCall__Inputs {
    return new SubmitGuildKickProposalCall__Inputs(this);
  }

  get outputs(): SubmitGuildKickProposalCall__Outputs {
    return new SubmitGuildKickProposalCall__Outputs(this);
  }
}

export class SubmitGuildKickProposalCall__Inputs {
  _call: SubmitGuildKickProposalCall;

  constructor(call: SubmitGuildKickProposalCall) {
    this._call = call;
  }

  get memberToKick(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitGuildKickProposalCall__Outputs {
  _call: SubmitGuildKickProposalCall;

  constructor(call: SubmitGuildKickProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RagequitCall extends ethereum.Call {
  get inputs(): RagequitCall__Inputs {
    return new RagequitCall__Inputs(this);
  }

  get outputs(): RagequitCall__Outputs {
    return new RagequitCall__Outputs(this);
  }
}

export class RagequitCall__Inputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }

  get sharesToBurn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lootToBurn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RagequitCall__Outputs {
  _call: RagequitCall;

  constructor(call: RagequitCall) {
    this._call = call;
  }
}

export class UpdateDelegateKeyCall extends ethereum.Call {
  get inputs(): UpdateDelegateKeyCall__Inputs {
    return new UpdateDelegateKeyCall__Inputs(this);
  }

  get outputs(): UpdateDelegateKeyCall__Outputs {
    return new UpdateDelegateKeyCall__Outputs(this);
  }
}

export class UpdateDelegateKeyCall__Inputs {
  _call: UpdateDelegateKeyCall;

  constructor(call: UpdateDelegateKeyCall) {
    this._call = call;
  }

  get newDelegateKey(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDelegateKeyCall__Outputs {
  _call: UpdateDelegateKeyCall;

  constructor(call: UpdateDelegateKeyCall) {
    this._call = call;
  }
}

export class ProcessWhitelistProposalCall extends ethereum.Call {
  get inputs(): ProcessWhitelistProposalCall__Inputs {
    return new ProcessWhitelistProposalCall__Inputs(this);
  }

  get outputs(): ProcessWhitelistProposalCall__Outputs {
    return new ProcessWhitelistProposalCall__Outputs(this);
  }
}

export class ProcessWhitelistProposalCall__Inputs {
  _call: ProcessWhitelistProposalCall;

  constructor(call: ProcessWhitelistProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessWhitelistProposalCall__Outputs {
  _call: ProcessWhitelistProposalCall;

  constructor(call: ProcessWhitelistProposalCall) {
    this._call = call;
  }
}

export class WithdrawBalancesCall extends ethereum.Call {
  get inputs(): WithdrawBalancesCall__Inputs {
    return new WithdrawBalancesCall__Inputs(this);
  }

  get outputs(): WithdrawBalancesCall__Outputs {
    return new WithdrawBalancesCall__Outputs(this);
  }
}

export class WithdrawBalancesCall__Inputs {
  _call: WithdrawBalancesCall;

  constructor(call: WithdrawBalancesCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get max(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawBalancesCall__Outputs {
  _call: WithdrawBalancesCall;

  constructor(call: WithdrawBalancesCall) {
    this._call = call;
  }
}

export class SubmitProposalCall extends ethereum.Call {
  get inputs(): SubmitProposalCall__Inputs {
    return new SubmitProposalCall__Inputs(this);
  }

  get outputs(): SubmitProposalCall__Outputs {
    return new SubmitProposalCall__Outputs(this);
  }
}

export class SubmitProposalCall__Inputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get applicant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sharesRequested(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lootRequested(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tributeOffered(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get tributeToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get paymentRequested(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class SubmitProposalCall__Outputs {
  _call: SubmitProposalCall;

  constructor(call: SubmitProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectTokensCall extends ethereum.Call {
  get inputs(): CollectTokensCall__Inputs {
    return new CollectTokensCall__Inputs(this);
  }

  get outputs(): CollectTokensCall__Outputs {
    return new CollectTokensCall__Outputs(this);
  }
}

export class CollectTokensCall__Inputs {
  _call: CollectTokensCall;

  constructor(call: CollectTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectTokensCall__Outputs {
  _call: CollectTokensCall;

  constructor(call: CollectTokensCall) {
    this._call = call;
  }
}

export class SponsorProposalCall extends ethereum.Call {
  get inputs(): SponsorProposalCall__Inputs {
    return new SponsorProposalCall__Inputs(this);
  }

  get outputs(): SponsorProposalCall__Outputs {
    return new SponsorProposalCall__Outputs(this);
  }
}

export class SponsorProposalCall__Inputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SponsorProposalCall__Outputs {
  _call: SponsorProposalCall;

  constructor(call: SponsorProposalCall) {
    this._call = call;
  }
}

export class SubmitVoteCall extends ethereum.Call {
  get inputs(): SubmitVoteCall__Inputs {
    return new SubmitVoteCall__Inputs(this);
  }

  get outputs(): SubmitVoteCall__Outputs {
    return new SubmitVoteCall__Outputs(this);
  }
}

export class SubmitVoteCall__Inputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uintVote(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SubmitVoteCall__Outputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _summoner(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _approvedTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _periodDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _votingPeriodLength(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _gracePeriodLength(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _proposalDeposit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _dilutionBound(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _processingReward(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _summonerShares(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class RagekickCall extends ethereum.Call {
  get inputs(): RagekickCall__Inputs {
    return new RagekickCall__Inputs(this);
  }

  get outputs(): RagekickCall__Outputs {
    return new RagekickCall__Outputs(this);
  }
}

export class RagekickCall__Inputs {
  _call: RagekickCall;

  constructor(call: RagekickCall) {
    this._call = call;
  }

  get memberToKick(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RagekickCall__Outputs {
  _call: RagekickCall;

  constructor(call: RagekickCall) {
    this._call = call;
  }
}

export class CancelProposalCall extends ethereum.Call {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class ProcessGuildKickProposalCall extends ethereum.Call {
  get inputs(): ProcessGuildKickProposalCall__Inputs {
    return new ProcessGuildKickProposalCall__Inputs(this);
  }

  get outputs(): ProcessGuildKickProposalCall__Outputs {
    return new ProcessGuildKickProposalCall__Outputs(this);
  }
}

export class ProcessGuildKickProposalCall__Inputs {
  _call: ProcessGuildKickProposalCall;

  constructor(call: ProcessGuildKickProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessGuildKickProposalCall__Outputs {
  _call: ProcessGuildKickProposalCall;

  constructor(call: ProcessGuildKickProposalCall) {
    this._call = call;
  }
}

export class ProcessProposalCall extends ethereum.Call {
  get inputs(): ProcessProposalCall__Inputs {
    return new ProcessProposalCall__Inputs(this);
  }

  get outputs(): ProcessProposalCall__Outputs {
    return new ProcessProposalCall__Outputs(this);
  }
}

export class ProcessProposalCall__Inputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }

  get proposalIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ProcessProposalCall__Outputs {
  _call: ProcessProposalCall;

  constructor(call: ProcessProposalCall) {
    this._call = call;
  }
}

export class SubmitWhitelistProposalCall extends ethereum.Call {
  get inputs(): SubmitWhitelistProposalCall__Inputs {
    return new SubmitWhitelistProposalCall__Inputs(this);
  }

  get outputs(): SubmitWhitelistProposalCall__Outputs {
    return new SubmitWhitelistProposalCall__Outputs(this);
  }
}

export class SubmitWhitelistProposalCall__Inputs {
  _call: SubmitWhitelistProposalCall;

  constructor(call: SubmitWhitelistProposalCall) {
    this._call = call;
  }

  get tokenToWhitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get details(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitWhitelistProposalCall__Outputs {
  _call: SubmitWhitelistProposalCall;

  constructor(call: SubmitWhitelistProposalCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
