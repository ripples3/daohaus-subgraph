// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Moloch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Moloch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Moloch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Moloch", id.toString(), this);
    }
  }

  static load(id: string): Moloch | null {
    return changetype<Moloch | null>(store.get("Moloch", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get summoner(): Bytes {
    let value = this.get("summoner");
    return value!.toBytes();
  }

  set summoner(value: Bytes) {
    this.set("summoner", Value.fromBytes(value));
  }

  get members(): Array<string> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set members(value: Array<string> | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposals(): Array<string> | null {
    let value = this.get("proposals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set proposals(value: Array<string> | null) {
    if (!value) {
      this.unset("proposals");
    } else {
      this.set("proposals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rageQuits(): Array<string> | null {
    let value = this.get("rageQuits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rageQuits(value: Array<string> | null) {
    if (!value) {
      this.unset("rageQuits");
    } else {
      this.set("rageQuits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value!.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get totalLoot(): BigInt {
    let value = this.get("totalLoot");
    return value!.toBigInt();
  }

  set totalLoot(value: BigInt) {
    this.set("totalLoot", Value.fromBigInt(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Member must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get delegateKey(): Bytes {
    let value = this.get("delegateKey");
    return value!.toBytes();
  }

  set delegateKey(value: Bytes) {
    this.set("delegateKey", Value.fromBytes(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get loot(): BigInt {
    let value = this.get("loot");
    return value!.toBigInt();
  }

  set loot(value: BigInt) {
    this.set("loot", Value.fromBigInt(value));
  }

  get exists(): boolean {
    let value = this.get("exists");
    return value!.toBoolean();
  }

  set exists(value: boolean) {
    this.set("exists", Value.fromBoolean(value));
  }

  get highestIndexYesVote(): string | null {
    let value = this.get("highestIndexYesVote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestIndexYesVote(value: string | null) {
    if (!value) {
      this.unset("highestIndexYesVote");
    } else {
      this.set("highestIndexYesVote", Value.fromString(<string>value));
    }
  }

  get tokenTribute(): BigInt {
    let value = this.get("tokenTribute");
    return value!.toBigInt();
  }

  set tokenTribute(value: BigInt) {
    this.set("tokenTribute", Value.fromBigInt(value));
  }

  get didRagequit(): boolean {
    let value = this.get("didRagequit");
    return value!.toBoolean();
  }

  set didRagequit(value: boolean) {
    this.set("didRagequit", Value.fromBoolean(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get submissions(): Array<string> | null {
    let value = this.get("submissions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set submissions(value: Array<string> | null) {
    if (!value) {
      this.unset("submissions");
    } else {
      this.set("submissions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rageQuits(): Array<string> | null {
    let value = this.get("rageQuits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rageQuits(value: Array<string> | null) {
    if (!value) {
      this.unset("rageQuits");
    } else {
      this.set("rageQuits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get isDao(): string | null {
    let value = this.get("isDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set isDao(value: string | null) {
    if (!value) {
      this.unset("isDao");
    } else {
      this.set("isDao", Value.fromString(<string>value));
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get uintVote(): i32 {
    let value = this.get("uintVote");
    return value!.toI32();
  }

  set uintVote(value: i32) {
    this.set("uintVote", Value.fromI32(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get memberAddress(): Bytes | null {
    let value = this.get("memberAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set memberAddress(value: Bytes | null) {
    if (!value) {
      this.unset("memberAddress");
    } else {
      this.set("memberAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get memberPower(): BigInt | null {
    let value = this.get("memberPower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set memberPower(value: BigInt | null) {
    if (!value) {
      this.unset("memberPower");
    } else {
      this.set("memberPower", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposalIndex(): BigInt | null {
    let value = this.get("proposalIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalIndex(value: BigInt | null) {
    if (!value) {
      this.unset("proposalIndex");
    } else {
      this.set("proposalIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get delegateKey(): Bytes | null {
    let value = this.get("delegateKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set delegateKey(value: Bytes | null) {
    if (!value) {
      this.unset("delegateKey");
    } else {
      this.set("delegateKey", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalIndex(): BigInt | null {
    let value = this.get("proposalIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalIndex(value: BigInt | null) {
    if (!value) {
      this.unset("proposalIndex");
    } else {
      this.set("proposalIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    return value!.toBigInt();
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get delegateKey(): Bytes {
    let value = this.get("delegateKey");
    return value!.toBytes();
  }

  set delegateKey(value: Bytes) {
    this.set("delegateKey", Value.fromBytes(value));
  }

  get yesVotes(): BigInt {
    let value = this.get("yesVotes");
    return value!.toBigInt();
  }

  set yesVotes(value: BigInt) {
    this.set("yesVotes", Value.fromBigInt(value));
  }

  get noVotes(): BigInt {
    let value = this.get("noVotes");
    return value!.toBigInt();
  }

  set noVotes(value: BigInt) {
    this.set("noVotes", Value.fromBigInt(value));
  }

  get maxTotalSharesAndLootAtYesVote(): BigInt | null {
    let value = this.get("maxTotalSharesAndLootAtYesVote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxTotalSharesAndLootAtYesVote(value: BigInt | null) {
    if (!value) {
      this.unset("maxTotalSharesAndLootAtYesVote");
    } else {
      this.set(
        "maxTotalSharesAndLootAtYesVote",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get yesShares(): BigInt {
    let value = this.get("yesShares");
    return value!.toBigInt();
  }

  set yesShares(value: BigInt) {
    this.set("yesShares", Value.fromBigInt(value));
  }

  get noShares(): BigInt {
    let value = this.get("noShares");
    return value!.toBigInt();
  }

  set noShares(value: BigInt) {
    this.set("noShares", Value.fromBigInt(value));
  }
}

export class RageQuit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RageQuit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RageQuit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RageQuit", id.toString(), this);
    }
  }

  static load(id: string): RageQuit | null {
    return changetype<RageQuit | null>(store.get("RageQuit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get moloch(): string {
    let value = this.get("moloch");
    return value!.toString();
  }

  set moloch(value: string) {
    this.set("moloch", Value.fromString(value));
  }

  get molochAddress(): Bytes {
    let value = this.get("molochAddress");
    return value!.toBytes();
  }

  set molochAddress(value: Bytes) {
    this.set("molochAddress", Value.fromBytes(value));
  }

  get member(): string {
    let value = this.get("member");
    return value!.toString();
  }

  set member(value: string) {
    this.set("member", Value.fromString(value));
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get loot(): BigInt {
    let value = this.get("loot");
    return value!.toBigInt();
  }

  set loot(value: BigInt) {
    this.set("loot", Value.fromBigInt(value));
  }
}
